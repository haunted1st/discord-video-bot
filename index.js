require('dotenv').config();
const express = require('express');
const {
  Client,
  GatewayIntentBits,
  Events,
  PermissionsBitField,
  ChannelType,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle
} = require('discord.js');

const app = express();
app.get('/', (req, res) => res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.listen(3000, () => console.log('üåê Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'));

function formatChannelName(username) {
  return username.toLowerCase()
    .replace(/\s+/g, '_')           // –ø—Ä–æ–±–µ–ª—ã ‚Üí –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    .replace(/[^a-z–∞-—è0-9_]/gi, ''); // —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, _
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

  const channel = await client.channels.fetch(process.env.BUTTON_CHANNEL_ID);

  const button = new ButtonBuilder()
    .setCustomId('send_video')
    .setLabel('üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ')
    .setStyle(ButtonStyle.Primary);

  const row = new ActionRowBuilder().addComponents(button);

  await channel.send({
    content: '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:',
    components: [row]
  });
});

client.on(Events.InteractionCreate, async interaction => {
  if (!interaction.isButton()) return;
  if (interaction.customId !== 'send_video') return;

  const guild = interaction.guild;
  const member = interaction.member;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, (24.06))
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const formattedDate = `(${day}.${month})`;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ ‚Äî –±–µ–∑ "–æ—Ç–∫–∞—Ç-", —Ç–æ–ª—å–∫–æ username + –¥–∞—Ç–∞
  const channelName = `${formatChannelName(member.user.username)}${formattedDate}`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
  const existingChannel = guild.channels.cache.find(c => c.name === channelName);
  if (existingChannel) {
    return interaction.reply({
      content: `üìÇ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: ${existingChannel}`,
      ephemeral: true
    });
  }

  const overwrites = [
    {
      id: guild.roles.everyone.id,
      deny: [PermissionsBitField.Flags.ViewChannel]
    },
    {
      id: member.id,
      allow: [
        PermissionsBitField.Flags.ViewChannel,
        PermissionsBitField.Flags.SendMessages,
        PermissionsBitField.Flags.AttachFiles,
        PermissionsBitField.Flags.ReadMessageHistory
      ]
    }
  ];

  if (process.env.STAFF_ROLE_ID_1) overwrites.push({ id: process.env.STAFF_ROLE_ID_1, allow: [PermissionsBitField.Flags.ViewChannel] });
  if (process.env.STAFF_ROLE_ID_2) overwrites.push({ id: process.env.STAFF_ROLE_ID_2, allow: [PermissionsBitField.Flags.ViewChannel] });
  if (process.env.STAFF_ROLE_ID_3) overwrites.push({ id: process.env.STAFF_ROLE_ID_3, allow: [PermissionsBitField.Flags.ViewChannel] });

  try {
    const privateChannel = await guild.channels.create({
      name: channelName,
      type: ChannelType.GuildText,
      parent: process.env.CATEGORY_ID,
      permissionOverwrites: overwrites
    });

    await privateChannel.send({
      content: `üëã –ü—Ä–∏–≤–µ—Ç, ${interaction.user}, –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—ë –æ—Ç–∫–∞—Ç —Å –ú–ü. –¢–æ–ª—å–∫–æ —Ç—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.\n\n` +
               `<@&${process.env.STAFF_ROLE_ID_1}> <@&${process.env.STAFF_ROLE_ID_2}> <@&${process.env.STAFF_ROLE_ID_3}>`
    });

    await interaction.reply({ content: 'üì© –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω!', ephemeral: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
    await interaction.reply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', ephemeral: true });
  }
});

client.login(process.env.DISCORD_TOKEN);
